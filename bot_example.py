import time
import os
import random
import string
import requests
import json
from selenium import webdriver
from selenium.common import TimeoutException
from selenium.common.exceptions import ElementClickInterceptedException, StaleElementReferenceException
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import argparse
from selenium.webdriver.common.action_chains import ActionChains
from datetime import datetime
import tempfile
import shutil
import sys
import argparse as _argparse
from selenium.webdriver.common.keys import Keys


def human_type(element, text, min_delay=0.08, max_delay=0.25):
    """
    –ò–º–∏—Ç–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
    
    Args:
        element: WebElement –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        text: –¢–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞
        min_delay: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
        max_delay: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
    """
    try:
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
        element.clear()
        time.sleep(random.uniform(0.2, 0.5))
        
        # –í–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for i, char in enumerate(text):
            element.send_keys(char)
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
            if char.isdigit():
                # –¶–∏—Ñ—Ä—ã –≤–≤–æ–¥—è—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ
                delay = random.uniform(0.05, 0.15)
            elif char in '.,!?@':
                # –ó–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è - –ø–∞—É–∑–∞ –ø–æ–¥–æ–ª—å—à–µ
                delay = random.uniform(0.15, 0.3)
            elif char == ' ':
                # –ü—Ä–æ–±–µ–ª—ã - –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
                delay = random.uniform(0.1, 0.2)
            else:
                # –û–±—ã—á–Ω—ã–µ –±—É–∫–≤—ã
                delay = random.uniform(min_delay, max_delay)
            
            # –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—É—é –ø–∞—É–∑—É (–∫–∞–∫ –±—É–¥—Ç–æ –¥—É–º–∞–µ–º)
            if random.random() < 0.1:  # 10% —à–∞–Ω—Å
                delay += random.uniform(0.3, 0.8)
            
            time.sleep(delay)
            
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞
        time.sleep(random.uniform(0.3, 0.8))
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º –≤–≤–æ–¥–µ: {e}")
        # Fallback - –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥
        try:
            element.clear()
            element.send_keys(text)
        except:
            pass


def human_scroll(driver, direction="down", distance=None):
    """
    –ò–º–∏—Ç–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    Args:
        driver: WebDriver instance
        direction: "down", "up", "random"
        distance: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (–µ—Å–ª–∏ None - —Å–ª—É—á–∞–π–Ω–æ–µ)
    """
    try:
        if distance is None:
            distance = random.randint(200, 800)
        
        if direction == "random":
            direction = random.choice(["down", "up"])
        
        # –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å –ø–∞—É–∑–∞–º–∏
        if direction == "down":
            driver.execute_script(f"window.scrollBy(0, {distance});")
        else:
            driver.execute_script(f"window.scrollBy(0, -{distance});")
        
        # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        time.sleep(random.uniform(0.5, 1.5))
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ: {e}")


def human_mouse_movement(driver, element=None):
    """
    –ò–º–∏—Ç–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç—É –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
    
    Args:
        driver: WebDriver instance
        element: WebElement (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    try:
        if element:
            # –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            ActionChains(driver).move_to_element(element).perform()
            time.sleep(random.uniform(0.2, 0.5))
        else:
            # –°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
            x_offset = random.randint(-100, 100)
            y_offset = random.randint(-100, 100)
            ActionChains(driver).move_by_offset(x_offset, y_offset).perform()
            time.sleep(random.uniform(0.1, 0.3))
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏: {e}")


def human_pause(min_seconds=1.0, max_seconds=3.0):
    """
    –ò–º–∏—Ç–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –ø–∞—É–∑—É (—á—Ç–µ–Ω–∏–µ, —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ)
    
    Args:
        min_seconds: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
        max_seconds: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
    """
    pause_time = random.uniform(min_seconds, max_seconds)
    time.sleep(pause_time)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è debug port –æ—Ç AdsPower
def get_adspower_debug_port():
	"""–ü–æ–ª—É—á–∞–µ—Ç debug port –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ AdsPower"""
	import os
	
	# –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
	debug_port = os.environ.get('ADSPOWER_DEBUG_PORT')
	if debug_port:
		print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é debug port –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: {debug_port}")
		return debug_port
	
	api_url = "http://127.0.0.1:50325"
	
	# –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
	endpoints = [
		"/api/v1/browser/active",
		"/api/v2/browser-profile/active", 
		"/api/v1/user/list",
		"/api/v2/browser-profile/list"
	]
	
	for endpoint in endpoints:
		try:
			print(f"üîç –ü—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã: {endpoint}")
			response = requests.get(f"{api_url}{endpoint}")
			
			if response.status_code == 200:
				result = response.json()
				print(f"   üìÑ –û—Ç–≤–µ—Ç: {result}")
				
				if result.get("code") == 0:
					# –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
					data = result.get("data", {})
					active_browsers = data.get("list", []) or data.get("browsers", []) or data.get("data", [])
					
					if active_browsers:
						# –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
						browser = active_browsers[0]
						debug_port = browser.get("debug_port")
						
						if debug_port:
							print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä AdsPower —Å debug port: {debug_port}")
							return debug_port
						else:
							print("‚ùå Debug port –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ")
					else:
						print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ")
				else:
					print(f"‚ùå –û—à–∏–±–∫–∞ API: {result.get('msg')}")
			else:
				print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
				
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {endpoint}: {e}")
	
	print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã")
	return None


def get_adspower_webdriver_path():
	"""–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ WebDriver –æ—Ç AdsPower"""
	import os
	
	# –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
	webdriver_path = os.environ.get('ADSPOWER_WEBDRIVER_PATH')
	if webdriver_path:
		print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é WebDriver path –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: {webdriver_path}")
		return webdriver_path
	
	# –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)
	return None


# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ email
def generate_email(name, last_name):
	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 4 —Å–ª—É—á–∞–π–Ω—ã–µ –±—É–∫–≤—ã
	prefix = ''.join(random.choices(string.ascii_letters, k=4))
	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 99
	number = random.randint(10, 99)
	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 7 —Å–ª—É—á–∞–π–Ω—ã—Ö –±—É–∫–≤
	suffix = ''.join(random.choices(string.ascii_letters, k=7))
	return f"{prefix}{name}{last_name}{number}{suffix}@gmail.com"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
def generate_password():
	return ''.join(random.choices(string.ascii_letters + string.digits, k=14))

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π (–û–ê–≠)
ADDRESS = "__Apt4208/42 _room_number_"
ADDRESS_LINE2 = "__building::PrincessTower"

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
CITY = "Dubai"
PROVINCE = "Dubai Marina"
PHONE = "+971508698540"

# –ú–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç (–Ω–æ–º–µ—Ä, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è, CVC)
# –ú–∞—Å—Å–∏–≤—ã –∫–∞—Ä—Ç –∏ –∏–º–µ–Ω —Ç–µ–ø–µ—Ä—å –≤ –≥–ª–∞–≤–Ω–æ–º —Ñ–∞–π–ª–µ

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
password = "passLiketest12141"

# –î–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —É–¥–∞–ª–µ–Ω—ã - –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∏–∑–≤–Ω–µ

# –§–∞–π–ª—ã –ª–æ–≥–æ–≤
LOG_FILE = "reports.log"
SUCCESS_FILE = "successful_registrations.txt"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
def log_message(message):
	timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
	with open(LOG_FILE, "a", encoding="utf-8") as log:
		log.write(f"\n[{timestamp}] {message}\n")
	print(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def save_successful_registration(user_data, order_status_link, order_number=None):
	timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
	success_data = {
		"timestamp": timestamp,
		"email": user_data["email"],
		"password": user_data["password"],
		"first_name": user_data["first_name"],
		"last_name": user_data["last_name"],
		"card_number": user_data["card_number"],
		"order_status_link": order_status_link,
		"order_number": order_number
	}
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
	with open(SUCCESS_FILE, "a", encoding="utf-8") as f:
		f.write(f"\n{'='*50}\n")
		f.write(f"–£–°–ü–ï–®–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø - {timestamp}\n")
		f.write(f"{'='*50}\n")
		f.write(f"Email: {success_data['email']}\n")
		f.write(f"Password: {success_data['password']}\n")
		f.write(f"Name: {success_data['first_name']} {success_data['last_name']}\n")
		f.write(f"Card: {success_data['card_number']}\n")
		f.write(f"Order Link: {success_data['order_status_link']}\n")
		if order_number:
			f.write(f"Order Number: {order_number}\n")
		f.write(f"{'='*50}\n")
	
	# –¢–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
	log_message(f"[SUCCESS] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data['email']}")


def save_artifacts(driver, prefix: str) -> None:
	ts = datetime.now().strftime("%Y%m%d_%H%M%S")
	html_name = f"{prefix}_{ts}.html"
	png_name = f"{prefix}_{ts}.png"
	try:
		with open(html_name, "w", encoding="utf-8") as f:
			f.write(driver.page_source)
	except Exception:
		pass
	try:
		driver.save_screenshot(png_name)
	except Exception:
		pass
	try:
		log_message(f"[DEBUG] Saved artifacts: {html_name}, {png_name}")
	except Exception:
		pass

def save_successful_order(user_data, order_details=None):
	"""–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–∞–π–ª"""
	try:
		# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
		success_dir = "successful_orders"
		if not os.path.exists(success_dir):
			os.makedirs(success_dir)
		
		# –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
		timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
		filename = f"{success_dir}/order_{timestamp}.txt"
		
		# –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		order_info = {
			"timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
			"email": user_data.get("email", "N/A"),
			"password": user_data.get("password", "N/A"),
			"first_name": user_data.get("first_name", "N/A"),
			"last_name": user_data.get("last_name", "N/A"),
			"address": user_data.get("address", "N/A"),
			"city": user_data.get("city", "N/A"),
			"province": user_data.get("province", "N/A"),
			"phone": user_data.get("phone", "N/A"),
			"card_number": user_data.get("card_number", "N/A"),
			"card_expiry": user_data.get("card_expiry", "N/A"),
			"card_cvc": user_data.get("card_cvc", "N/A"),
			"card_name": user_data.get("card_name", "N/A")
		}
		
		# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
		if order_details:
			order_info.update(order_details)
		
		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
		with open(filename, 'w', encoding='utf-8') as f:
			f.write("=== –£–°–ü–ï–®–ù–´–ô –ó–ê–ö–ê–ó WHOOP ===\n")
			f.write(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {order_info['timestamp']}\n")
			f.write("=" * 50 + "\n\n")
			
			f.write("–î–ê–ù–ù–´–ï –ê–ö–ö–ê–£–ù–¢–ê:\n")
			f.write(f"Email: {order_info['email']}\n")
			f.write(f"–ü–∞—Ä–æ–ª—å: {order_info['password']}\n\n")
			
			f.write("–î–ê–ù–ù–´–ï –î–û–°–¢–ê–í–ö–ò:\n")
			f.write(f"–ò–º—è: {order_info['first_name']}\n")
			f.write(f"–§–∞–º–∏–ª–∏—è: {order_info['last_name']}\n")
			f.write(f"–ê–¥—Ä–µ—Å: {order_info['address']}\n")
			f.write(f"–ì–æ—Ä–æ–¥: {order_info['city']}\n")
			f.write(f"–û–±–ª–∞—Å—Ç—å: {order_info['province']}\n")
			f.write(f"–¢–µ–ª–µ—Ñ–æ–Ω: {order_info['phone']}\n\n")
			
			f.write("–î–ê–ù–ù–´–ï –ö–ê–†–¢–´:\n")
			f.write(f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {order_info['card_number']}\n")
			f.write(f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {order_info['card_expiry']}\n")
			f.write(f"CVC: {order_info['card_cvc']}\n")
			f.write(f"–ò–º—è –Ω–∞ –∫–∞—Ä—Ç–µ: {order_info['card_name']}\n\n")
			
			if order_details:
				f.write("–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ï–¢–ê–õ–ò:\n")
				for key, value in order_details.items():
					f.write(f"{key}: {value}\n")
		
		print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
		return filename
		
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: {e}")
		return None


def click_safely(driver, wait, locators, name: str = "button"):
	for locator in locators:
		try:
			el = wait.until(EC.presence_of_element_located(locator))
			
		# Cookie banner —É–∂–µ –∑–∞–∫—Ä—ã—Ç –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ attempt_registration
			
			try:
				driver.execute_script(
					"arguments[0].scrollIntoView({block: 'center', inline: 'center'});",
					el,
				)
			except Exception:
				pass
			time.sleep(2)
			el = wait.until(EC.visibility_of_element_located(locator))

			try:
				attrs = []
				for a in ["id", "name", "data-testid", "aria-disabled", "disabled"]:
					try:
						attrs.append(f"{a}={el.get_attribute(a)}")
					except Exception:
						pass
				log_message(
					f"[DEBUG] Try click {name} via {locator}: displayed={el.is_displayed()} enabled={el.is_enabled()} attrs={' '.join(attrs)}"
				)
			except Exception:
				pass

			# –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫
			try:
				el.click()
				print(f"‚úÖ –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –ø–æ {name} –ø—Ä–æ—à–µ–ª!")
				return True
			except Exception as e:
				print(f"‚ùå –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –ø–æ {name} –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
				# –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript
				try:
					driver.execute_script("arguments[0].click();", el)
					print(f"‚úÖ JavaScript –∫–ª–∏–∫ –ø–æ {name} –ø—Ä–æ—à–µ–ª!")
					return True
				except Exception as e2:
					print(f"‚ùå JavaScript –∫–ª–∏–∫ –ø–æ {name} –Ω–µ –ø—Ä–æ—à–µ–ª: {e2}")
					# –ü—Ä–æ–±—É–µ–º ActionChains
					try:
						ActionChains(driver).move_to_element(el).click().perform()
						print(f"‚úÖ ActionChains –∫–ª–∏–∫ –ø–æ {name} –ø—Ä–æ—à–µ–ª!")
						return True
					except Exception as e3:
						print(f"‚ùå ActionChains –∫–ª–∏–∫ –ø–æ {name} –Ω–µ –ø—Ä–æ—à–µ–ª: {e3}")
						save_artifacts(driver, f"whoop_click_failed_{name}")
						continue
		except Exception as e:
			try:
				log_message(f"[DEBUG] Locator not clickable {name} via {locator}: {e}")
			except Exception:
				pass
			save_artifacts(driver, f"whoop_locator_unavailable_{name}")
		finally:
			try:
				driver.switch_to.default_content()
			except Exception:
				pass
	return False


# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def attempt_registration(reg_num, attempt=0, order_data=None, return_driver=False):
	if order_data:
		user_data = order_data
	else:
		# –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
		user_data = {
			"email": f"test{random.randint(1000, 9999)}@example.com",
			"password": "password123",
			"first_name": "John",
			"last_name": "Doe",
			"address": "123 Main Street",
			"city": "Dubai",
			"province": "Dubai",
			"phone": "+971501234567",
			"card_number": "4111111111111111",
			"card_expiry": "12/25",
			"card_cvc": "123",
			"card_name": "John Doe"
		}
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É –±—Ä–∞—É–∑–µ—Ä—É AdsPower
	debug_port = get_adspower_debug_port()
	if not debug_port:
		print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å debug port –æ—Ç AdsPower!")
		return False
	
	options = webdriver.ChromeOptions()
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É –±—Ä–∞—É–∑–µ—Ä—É AdsPower
	options.add_experimental_option("debuggerAddress", f"127.0.0.1:{debug_port}")
	
	# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Å–∫—Ç–æ–ø–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–∞–π—Ç–∞
	options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
	options.add_argument("--window-size=1920,1080")
	options.add_argument("--disable-mobile-emulation")
	options.add_argument("--disable-device-emulation")
	
	# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ WebDriver –æ—Ç AdsPower
	webdriver_path = get_adspower_webdriver_path()
	
	if webdriver_path:
		print(f"üîß –ò—Å–ø–æ–ª—å–∑—É—é WebDriver –æ—Ç AdsPower: {webdriver_path}")
		from selenium.webdriver.chrome.service import Service as ChromeService
		service = ChromeService(executable_path=webdriver_path)
		driver = webdriver.Chrome(service=service, options=options)
	else:
		print("‚ö†Ô∏è WebDriver –æ—Ç AdsPower –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π")
		from selenium.webdriver.chrome.service import Service as ChromeService
		from webdriver_manager.chrome import ChromeDriverManager
		service = ChromeService(ChromeDriverManager().install())
		driver = webdriver.Chrome(service=service, options=options)
	wait = WebDriverWait(driver, 10)

	try:
		print(f"-------–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é #{reg_num}-------")
		log_message(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ: {user_data['email']} - {user_data['first_name']} {user_data['last_name']}")

		print("-------–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç Whoop...-------")
		driver.get("https://www.whoop.com/ae/en/")
		
		# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–Ω—É—é –≤–µ—Ä—Å–∏—é
		print("üñ•Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–Ω—É—é –≤–µ—Ä—Å–∏—é...")
		driver.execute_script("""
			// –£–¥–∞–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ viewport –º–µ—Ç–∞-—Ç–µ–≥–∏
			var mobileViewports = document.querySelectorAll('meta[name="viewport"]');
			mobileViewports.forEach(function(meta) {
				if (meta.content.includes('width=device-width') || meta.content.includes('initial-scale=1')) {
					meta.remove();
				}
			});
			
			// –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–π viewport
			var desktopViewport = document.createElement('meta');
			desktopViewport.name = 'viewport';
			desktopViewport.content = 'width=1920, initial-scale=1.0';
			document.head.appendChild(desktopViewport);
			
			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
			window.resizeTo(1920, 1080);
		""")
		
		time.sleep(20)
		
		# –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑
		print("üîÑ –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
		human_scroll(driver, "down", random.randint(300, 600))
		human_pause(1.0, 2.5)
		human_scroll(driver, "up", random.randint(200, 400))
		human_pause(0.5, 1.5)  

		# –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
		print("-------–ó–∞–∫—Ä—ã–≤–∞–µ–º cookie banner...-------")
		try:
			cookie_selectors = [
				"//button[contains(text(), 'ACCEPT')]",
				"//button[contains(text(), 'Accept')]", 
				"[data-testid*='accept']",
				"[data-testid*='cookie']",
				"#onetrust-accept-btn-handler",
				".ot-sdk-show-settings",
				"button[class*='accept']",
				"button[class*='cookie']"
			]
			
			cookie_closed = False
			for selector in cookie_selectors:
				try:
					if selector.startswith("//"):
						cookie_banner = driver.find_element(By.XPATH, selector)
					else:
						cookie_banner = driver.find_element(By.CSS_SELECTOR, selector)
					
					if cookie_banner.is_displayed():
						print("üç™ –ó–∞–∫—Ä—ã–≤–∞—é cookie banner...")
						cookie_banner.click()
						cookie_closed = True
						time.sleep(5)
						break
				except:
					continue
			
			if not cookie_closed:
				print("‚ö†Ô∏è Cookie banner –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
		except:
			print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ cookie banner")

		print("-------–ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É 'Join Now'...-------")
		
		# –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ Join Now
		join_now_button = wait.until(EC.presence_of_element_located((By.XPATH, "//a[contains(@class, 'primary-button_primary-cta')]//span[contains(text(), 'Join Now')]")))
		print("‚úÖ –ö–Ω–æ–ø–∫–∞ Join Now –Ω–∞–π–¥–µ–Ω–∞!")
		
		# –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–Ω–æ–ø–∫–µ
		driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", join_now_button)
		time.sleep(5)
		
		# –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –∫ –∫–Ω–æ–ø–∫–µ
		human_mouse_movement(driver, join_now_button)
		human_pause(1.0, 2.0)
		
		print("-------–ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript...-------")

		try:
			driver.execute_script("arguments[0].click();", join_now_button)
			print("‚úÖ JavaScript –∫–ª–∏–∫ –ø—Ä–æ—à–µ–ª!")
		except Exception as e2:
			print(f"‚ùå JavaScript –∫–ª–∏–∫ –Ω–µ –ø—Ä–æ—à–µ–ª: {e2}")
			# –ü—Ä–æ–±—É–µ–º ActionChains
			try:
				from selenium.webdriver.common.action_chains import ActionChains
				ActionChains(driver).move_to_element(join_now_button).click().perform()
				print("‚úÖ ActionChains –∫–ª–∏–∫ –ø—Ä–æ—à–µ–ª!")
			except Exception as e3:
				print(f"‚ùå ActionChains –∫–ª–∏–∫ –Ω–µ –ø—Ä–æ—à–µ–ª: {e3}")
				raise Exception("–í—Å–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
		
		time.sleep(20)
		
		# –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
		print("üîÑ –ò–∑—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
		human_scroll(driver, "down", random.randint(200, 500))
		human_pause(1.5, 3.0)

		print("-------–ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É 'Start with PEAK'...-------")
		
		# –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ Start with PEAK
		start_peak_button = wait.until(EC.presence_of_element_located((By.XPATH, "//button[@data-testid='membership-PEAK-card-cta']")))
		print("‚úÖ –ö–Ω–æ–ø–∫–∞ Start with PEAK –Ω–∞–π–¥–µ–Ω–∞!")
		
		# –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–Ω–æ–ø–∫–µ
		driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", start_peak_button)
		time.sleep(5)
		
		# –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –∫ –∫–Ω–æ–ø–∫–µ
		human_mouse_movement(driver, start_peak_button)
		human_pause(1.0, 2.0)
		
		print("-------–ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript...-------")

		try:
			driver.execute_script("arguments[0].click();", start_peak_button)
			print("‚úÖ JavaScript –∫–ª–∏–∫ –ø—Ä–æ—à–µ–ª!")
		except Exception as e2:
			print(f"‚ùå JavaScript –∫–ª–∏–∫ –Ω–µ –ø—Ä–æ—à–µ–ª: {e2}")
			# –ü—Ä–æ–±—É–µ–º ActionChains
			try:
				from selenium.webdriver.common.action_chains import ActionChains
				ActionChains(driver).move_to_element(start_peak_button).click().perform()
				print("‚úÖ ActionChains –∫–ª–∏–∫ –ø—Ä–æ—à–µ–ª!")
			except Exception as e3:
				print(f"‚ùå ActionChains –∫–ª–∏–∫ –Ω–µ –ø—Ä–æ—à–µ–ª: {e3}")
				raise Exception("–í—Å–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
		
		time.sleep(20)
		
		# –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
		print("üîÑ –ò–∑—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
		human_scroll(driver, "down", random.randint(200, 500))
		human_pause(1.5, 3.0)

		print("-------–ù–∞–∂–∏–º–∞–µ–º 'Continue'...-------")
		
		# –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∏–∫–∞
		continue_locators = [
			(By.XPATH, "//button[contains(text(), 'Continue')]")
		]
		
		if not click_safely(driver, wait, continue_locators, name="continue-button"):
			raise Exception("–ö–Ω–æ–ø–∫–∞ Continue –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞")
		
		time.sleep(20)
		
		# –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –∏–∑—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–ª–µ–Ω—Å—Ç–≤–∞
		print("üîÑ –ò–∑—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–ª–µ–Ω—Å—Ç–≤–∞...")
		human_scroll(driver, "down", random.randint(150, 400))
		human_pause(2.0, 4.0)
		human_scroll(driver, "up", random.randint(100, 300))
		human_pause(1.0, 2.0)

		print("-------–í—ã–±–∏—Ä–∞–µ–º Trial-membership...-------")
		
		# –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∏–∫–∞
		trial_locators = [
			(By.XPATH, "//button[@data-testid='trial-membership']")
		]
		
		if not click_safely(driver, wait, trial_locators, name="trial-membership"):
			raise Exception("–ö–Ω–æ–ø–∫–∞ Trial-membership –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞")
		
		time.sleep(20)
		
		# –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –∏–∑—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
		print("üîÑ –ò–∑—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É...")
		human_scroll(driver, "down", random.randint(100, 300))
		human_pause(1.5, 2.5)

		print("-------–ù–∞–∂–∏–º–∞–µ–º Check Out...-------")
		
		# –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∏–∫–∞
		checkout_locators = [
			(By.XPATH, "//button[@data-testid='cart-continueButton']")
		]
		
		if not click_safely(driver, wait, checkout_locators, name="checkout-button"):
			raise Exception("–ö–Ω–æ–ø–∫–∞ Check Out –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞")
		
		time.sleep(20)
		
		# –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –∏–∑—É—á–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		print("üîÑ –ò–∑—É—á–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
		human_scroll(driver, "down", random.randint(200, 500))
		human_pause(2.0, 3.5)
		human_scroll(driver, "up", random.randint(100, 300))
		human_pause(1.0, 2.0)

		print("-------–ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...-------")
		email_field = wait.until(EC.presence_of_element_located((By.NAME, "email")))
		human_mouse_movement(driver, email_field)
		human_type(email_field, user_data["email"])
		log_message(f"Email: {user_data['email']}")

		password_field = driver.find_element(By.NAME, "password")
		human_mouse_movement(driver, password_field)
		human_type(password_field, user_data["password"])

		confirm_password = driver.find_element(By.NAME, "confirm")
		human_mouse_movement(driver, confirm_password)
		human_type(confirm_password, user_data["password"])

		print("-------–ù–∞–∂–∏–º–∞–µ–º 'Next' –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...-------")
		
		# –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∏–∫–∞
		next_locators = [
			(By.XPATH, "//button[@data-testid='next-button-create-account']")
		]
		
		if not click_safely(driver, wait, next_locators, name="next-button"):
			raise Exception("–ö–Ω–æ–ø–∫–∞ Next –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞")
		
		time.sleep(20)
		
		# –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –∏–∑—É—á–∞–µ–º —Ñ–æ—Ä–º—É –∞–¥—Ä–µ—Å–∞
		print("üîÑ –ò–∑—É—á–∞–µ–º —Ñ–æ—Ä–º—É –∞–¥—Ä–µ—Å–∞...")
		human_scroll(driver, "down", random.randint(150, 400))
		human_pause(2.0, 3.0)

		print("-------–ó–∞–ø–æ–ª–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏...-------")
		first_name = wait.until(EC.presence_of_element_located((By.ID, "first_name")))
		human_mouse_movement(driver, first_name)
		human_type(first_name, user_data["first_name"])

		last_name = driver.find_element(By.ID, "last_name")
		human_mouse_movement(driver, last_name)
		human_type(last_name, user_data["last_name"])

		print("-------–í–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å...-------")
		address = wait.until(EC.presence_of_element_located((By.ID, "line1")))
		human_mouse_movement(driver, address)
		human_type(address, user_data["address"])

		try:
			address2 = driver.find_element(By.ID, "line2")
			human_mouse_movement(driver, address2)
			human_type(address2, user_data["address_line2"])
		except Exception:
			pass

		print("-------–í–≤–æ–¥–∏–º –≥–æ—Ä–æ–¥...-------")
		city_el = WebDriverWait(driver, 10).until(
			EC.presence_of_element_located((By.CSS_SELECTOR, "[data-testid='City'][role='combobox']"))
		)
		human_mouse_movement(driver, city_el)
		city_el.click()
		human_type(city_el, user_data["city"])
		city_el.send_keys(Keys.ENTER)

		print("-------–í–≤–æ–¥–∏–º Area/District...-------")
		try:
			# –ü–æ–ª–µ Area/District (–∏—â–µ–º –ø–æ data-testid "Area/District")
			area_district = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "[data-testid='Area/District']")))
			human_type(area_district, user_data["province"])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ province –¥–ª—è Area/District
			print(f"‚úÖ –í–≤–µ–¥–µ–Ω–æ –≤ Area/District: {user_data['province']}")
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ Area/District: {e}")
			# –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
			try:
				area_district = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "[data-testid='province']")))
				human_type(area_district, user_data["province"])
				print(f"‚úÖ –í–≤–µ–¥–µ–Ω–æ –≤ Area/District (—á–µ—Ä–µ–∑ province): {user_data['province']}")
			except Exception as e2:
				print(f"‚ùå –ß–µ—Ä–µ–∑ province –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")
				try:
					area_district = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "[aria-label='Command input']")))
					human_type(area_district, user_data["province"])
					print(f"‚úÖ –í–≤–µ–¥–µ–Ω–æ –≤ Area/District (—á–µ—Ä–µ–∑ aria-label): {user_data['province']}")
				except Exception as e3:
					print(f"‚ùå –í—Å–µ —Å–ø–æ—Å–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏: {e3}")

		print("-------–í–≤–æ–¥–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω...-------")
		phone = wait.until(EC.presence_of_element_located((By.ID, "phone")))
		human_mouse_movement(driver, phone)
		human_type(phone, user_data["phone"])

		print("-------–ù–∞–∂–∏–º–∞–µ–º 'Next' –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞...-------")
		try:
			# –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∏–∫–∞
			next_address_locators = [
				(By.XPATH, "//button[@data-testid='next-button-shipping-address']")
			]
			
			if not click_safely(driver, wait, next_address_locators, name="next-address-button"):
				raise Exception("–ö–Ω–æ–ø–∫–∞ Next Address –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞")
			
			time.sleep(20)
		except Exception:
			pass

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É; –∏–Ω–∞—á–µ ‚Äî —Ä–æ–±–∞—Å—Ç–Ω—ã–π –∫–ª–∏–∫ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
		try:
			# –ò—â–µ–º –ª—é–±—É—é –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫
			WebDriverWait(driver, 5).until(
				EC.any_of(
					EC.element_to_be_clickable((By.XPATH, "//button[@data-testid='next-button-shipping-method']")),
					EC.element_to_be_clickable((By.XPATH, "//button[@data-testid='confirm-address']"))
				)
			)
		except Exception:
			print("-------–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –Ω–∞–¥—ë–∂–Ω—ã–π –∫–ª–∏–∫ 'Next' –∞–¥—Ä–µ—Å–∞...-------")
			next_locators = [
				(By.XPATH, "//button[@data-testid='next-button-shipping-address']"),
				(By.XPATH, "//button[@type='submit' and .//span[contains(., 'Next')]]"),
				(By.XPATH, "//button[contains(., 'Next')]")
			]
			if not click_safely(driver, wait, next_locators, name="next-shipping-address"):
				# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã
				for fld in driver.find_elements(By.CSS_SELECTOR, "[aria-invalid='true'], .aria-[invalid=true]"):
					fid = fld.get_attribute("id") or fld.get_attribute("name") or "<no-id>"
					log_message(f"[ADDRESS_INVALID] {fid}")
				raise Exception("Next after address not clickable")
			time.sleep(20)

		# –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∞ confirm-address (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞)
		print("-------–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–¥—Ä–µ—Å...-------")
		try:
			confirm_button = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "[data-testid='confirm-address']")))
			print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ confirm-address - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥—Ä–µ—Å!")
			
			driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", confirm_button)
			time.sleep(2)
			
			driver.execute_script("arguments[0].click();", confirm_button)
			print("‚úÖ JavaScript –∫–ª–∏–∫ –ø–æ confirm-address –ø—Ä–æ—à–µ–ª!")
			time.sleep(20)
			
		except Exception as e:
			print(f"‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ confirm-address –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")

		# –¢–ï–ü–ï–†–¨ –≤—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
		print("-------–í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –Ω–∞–∂–∏–º–∞–µ–º 'Weiter'...-------")
		
		# –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ shipping method (–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º—É)
		try:
			shipping_button = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "[data-testid='next-button-shipping-method']")))
			print("‚úÖ –ö–Ω–æ–ø–∫–∞ shipping method –Ω–∞–π–¥–µ–Ω–∞!")
			
			# –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–Ω–æ–ø–∫–µ
			driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", shipping_button)
			time.sleep(20)
			
			# –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫
			try:
				shipping_button.click()
				print("‚úÖ –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –ø–æ shipping method –ø—Ä–æ—à–µ–ª!")
			except Exception as e:
				print(f"‚ùå –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
				# –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript
				try:
					driver.execute_script("arguments[0].click();", shipping_button)
					print("‚úÖ JavaScript –∫–ª–∏–∫ –ø–æ shipping method –ø—Ä–æ—à–µ–ª!")
				except Exception as e2:
					print(f"‚ùå JavaScript –∫–ª–∏–∫ –Ω–µ –ø—Ä–æ—à–µ–ª: {e2}")
					# –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É –Ω–∞–ø—Ä—è–º—É—é
					try:
						driver.execute_script("document.getElementById('shipping-method-form').submit();")
						print("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã shipping method –ø—Ä–æ—à–µ–ª!")
					except Exception as e3:
						print(f"‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –Ω–µ –ø—Ä–æ—à–µ–ª: {e3}")
						raise Exception("–í—Å–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞ –ø–æ shipping method –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
			
		except Exception as e:
			print(f"‚ùå –ö–Ω–æ–ø–∫–∞ shipping method –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
			raise Exception("–ö–Ω–æ–ø–∫–∞ shipping method –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		
		time.sleep(20)

		print("-------–ò—â–µ–º iframe —Å –ø–æ–ª—è–º–∏ –∫–∞—Ä—Ç—ã-------")
		iframe_index = None
		iframes = driver.find_elements(By.TAG_NAME, "iframe")

		for index, iframe in enumerate(iframes):
			try:
				driver.switch_to.frame(iframe)
				inner_html = driver.execute_script("return document.body.innerHTML")

				if "cardnumber" in inner_html and "exp-date" in inner_html and "cvc" in inner_html:
					iframe_index = index
					print(f"–ù–∞–π–¥–µ–Ω –Ω—É–∂–Ω—ã–π iframe: #{iframe_index}")
					driver.switch_to.default_content()
					break

				driver.switch_to.default_content()
			except Exception as e:
				print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ iframe[{index}]: {e}")
				driver.switch_to.default_content()

		if iframe_index is None:
			log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ iframe —Å –ø–æ–ª—è–º–∏ –∫–∞—Ä—Ç—ã")
			return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É

		# –í–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
		try:
			driver.switch_to.frame(iframes[iframe_index])
			
			# –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –∏–∑—É—á–∞–µ–º —Ñ–æ—Ä–º—É –∫–∞—Ä—Ç—ã
			print("üîÑ –ò–∑—É—á–∞–µ–º —Ñ–æ—Ä–º—É –∫–∞—Ä—Ç—ã...")
			human_pause(1.0, 2.0)

			card_number_field = wait.until(EC.presence_of_element_located((By.NAME, "cardnumber")))
			human_mouse_movement(driver, card_number_field)
			human_type(card_number_field, user_data["card_number"])
			print("–í–≤–µ–ª –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã")
			human_pause(0.5, 1.0)

			exp_date_field = wait.until(EC.presence_of_element_located((By.NAME, "exp-date")))
			human_mouse_movement(driver, exp_date_field)
			human_type(exp_date_field, user_data["card_expiry"])
			print("–í–≤–µ–ª —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è")
			human_pause(0.5, 1.0)

			cvc_field = wait.until(EC.presence_of_element_located((By.NAME, "cvc")))
			human_mouse_movement(driver, cvc_field)
			human_type(cvc_field, user_data["card_cvc"])
			print("–í–≤–µ–ª CVC")
			human_pause(1.0, 2.0)

			driver.switch_to.default_content()
		except Exception as e:
			log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã: {e}")
			driver.switch_to.default_content()

		print("-------–ù–∞–∂–∏–º–∞–µ–º 'Place Order'...-------")
		try:
			# –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∏–∫–∞
			place_order_locators = [
				(By.XPATH, "//button[@data-testid='complete-purchase']")
			]
			
			if click_safely(driver, wait, place_order_locators, name="place-order-button"):
				log_message("–ö–Ω–æ–ø–∫–∞ Place Order –Ω–∞–∂–∞—Ç–∞")
			else:
				raise Exception("–ö–Ω–æ–ø–∫–∞ Place Order –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
			time.sleep(25)  # –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
		except Exception as e:
			log_message(f"–û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Place Order: {e}")
			# –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
			try:
				# –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∏–∫–∞
				alt_place_order_locators = [
					(By.XPATH, "//button[contains(text(), 'Place Order')]")
				]
				
				if click_safely(driver, wait, alt_place_order_locators, name="alt-place-order-button"):
					log_message("Place Order –Ω–∞–∂–∞—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º")
				else:
					raise Exception("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ Place Order –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
				time.sleep(3)
			except:
				log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å Place Order")
				# –†–æ–±–∞—Å—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
				click_safely(
					driver,
					wait,
					[
						(By.XPATH, "//button[@data-testid='complete-purchase']"),
						(By.XPATH, "//button[contains(text(), 'Place Order')]")
					],
					name="complete-purchase"
				)

		try:
			# –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
			error_message = WebDriverWait(driver, 5).until(
				EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'text-red-a400')]"))
			).text

			# –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
			log_message(f"[UNSUCCESSFUL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ: {error_message}, –ö–∞—Ä—Ç–∞: {user_data['card_number']}")

		except:
			# –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å, –∑–Ω–∞—á–∏—Ç –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ
			log_message("[SUCCESSFUL]–û—à–∏–±–æ–∫ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

		print("-------–ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à—ë–ª –ª–∏ –ø–ª–∞—Ç–µ–∂...-------")
		try:
			order_status_link = wait.until(
				EC.presence_of_element_located(
					(By.XPATH, "//a[contains(@href, 'orderstatus.whoop.com')]"))).get_attribute(
				"href")
			log_message(f"[SUCCESSFUL]–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω!Email: {user_data['email']}, Pass:{user_data['password']}, –ö–∞—Ä—Ç–∞: {user_data['card_number']}, –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: {order_status_link}")
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
			save_successful_registration(user_data, order_status_link)
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É
			order_details = {
				"order_status_link": order_status_link,
				"payment_status": "SUCCESS",
				"transaction_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
			}
			save_successful_order(user_data, order_details)

			print("-------–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞...25 —Å–µ–∫-------")
			driver.get(order_status_link)
			time.sleep(20)

			print("-------–ò—â–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞...-------")
			order_number_element = None

			# –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ –ø–æ –∫–ª–∞—Å—Å—É
			try:
				order_number_element = WebDriverWait(driver, 10).until(
					EC.presence_of_element_located((By.CLASS_NAME, "gpSbjZ"))
				)
			except:
				pass  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–ª–∞—Å—Å—É, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±

			# –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–ª–∞—Å—Å—É, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
			if not order_number_element:
				try:
					order_number_element = WebDriverWait(driver, 10).until(
						EC.presence_of_element_located((By.XPATH, "//div[contains(text(), 'Order number:')]"))
					)
				except:
					pass

			# –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –î–µ—Ç–∞–ª–∏
			if not order_number_element:
				print("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å –î–µ—Ç–∞–ª–∏...")
				try:
					quittung_button = wait.until(
						EC.element_to_be_clickable((By.XPATH, "//a[@data-test-id='view-order-details']"))
					)
					quittung_button.click()
					time.sleep(10)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã

					print("-------–ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ –Ω–æ–≤–æ–º –±–ª–æ–∫–µ...-------")
					order_number_element = wait.until(
						EC.presence_of_element_located((By.CLASS_NAME, "order-details_shipItem__ln8a9"))
					)
				except:
					pass

			# –ï—Å–ª–∏ –Ω–∞—à–ª–∏, –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
			if order_number_element:
				order_number = order_number_element.text.split(":")[-1].strip()
				log_message(f"[SUCCESSFUL]–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}")
				# –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
				save_successful_registration(user_data, order_status_link, order_number)
				
				# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
				order_details = {
					"order_status_link": order_status_link,
					"order_number": order_number,
					"payment_status": "SUCCESS",
					"transaction_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
				}
				save_successful_order(user_data, order_details)
			else:
				print("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.")
				page_source = driver.page_source
				with open("whoop_order_status.html", "w", encoding="utf-8") as f:
					f.write(page_source)
				log_message(f"[BUT]: –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

		except Exception:
			log_message(f"[UNSUCCESSFUL]–û—à–∏–±–∫–∞: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞. –ö–∞—Ä—Ç–∞: {user_data['card_number']}")
			return False  # –ù–µ—É–¥–∞—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

		log_message(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è #{reg_num + 1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {user_data['email']}")
		if return_driver:
			return True, driver, wait  # –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + driver/wait
		return True  # –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

	except Exception as e:
		print(f"-------–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}-------")
		try:
			with open("whoop_error_page.html", "w", encoding="utf-8") as f:
				f.write(driver.page_source)
			log_message("[DEBUG] Saved whoop_error_page.html")
		except Exception:
			pass
		try:
			driver.save_screenshot("whoop_error_page.png")
			log_message("[DEBUG] Saved whoop_error_page.png")
		except Exception:
			pass
		if return_driver:
			return False, driver, wait  # –ù–µ—É–¥–∞—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + driver/wait
		return False  # –ù–µ—É–¥–∞—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

	finally:
		if not return_driver:
			print("-------–ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...-------")
			time.sleep(1)
			try:
				driver.quit()
			finally:
				# –ù–ï —É–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å - –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è AdsPower
				pass


def change_card_data_only(driver, wait, order_data):
	"""–ú–µ–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
	try:
		print("-------–ú–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã...-------")
		
		# –ò—â–µ–º iframe —Å –ø–æ–ª—è–º–∏ –∫–∞—Ä—Ç—ã
		iframe_index = None
		iframes = driver.find_elements(By.TAG_NAME, "iframe")

		for index, iframe in enumerate(iframes):
			try:
				driver.switch_to.frame(iframe)
				inner_html = driver.execute_script("return document.body.innerHTML")

				if "cardnumber" in inner_html and "exp-date" in inner_html and "cvc" in inner_html:
					iframe_index = index
					print(f"–ù–∞–π–¥–µ–Ω –Ω—É–∂–Ω—ã–π iframe: #{iframe_index}")
					driver.switch_to.default_content()
					break

				driver.switch_to.default_content()
			except Exception as e:
				print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ iframe[{index}]: {e}")
				driver.switch_to.default_content()

		if iframe_index is None:
			print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ iframe —Å –ø–æ–ª—è–º–∏ –∫–∞—Ä—Ç—ã")
			return False

		# –ú–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
		driver.switch_to.frame(iframes[iframe_index])

		card_number_field = wait.until(EC.presence_of_element_located((By.NAME, "cardnumber")))
		card_number_field.clear()
		human_type(card_number_field, order_data["card_number"])
		print("–í–≤–µ–ª –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã")

		exp_date_field = wait.until(EC.presence_of_element_located((By.NAME, "exp-date")))
		exp_date_field.clear()
		human_type(exp_date_field, order_data["card_expiry"])
		print("–í–≤–µ–ª –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è")

		cvc_field = wait.until(EC.presence_of_element_located((By.NAME, "cvc")))
		cvc_field.clear()
		human_type(cvc_field, order_data["card_cvc"])
		print("–í–≤–µ–ª –Ω–æ–≤—ã–π CVC")

		driver.switch_to.default_content()
		return True
		
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã: {e}")
		driver.switch_to.default_content()
		return False


def run_single_registration(order_data):
	"""–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
	print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏:")
	print(f"üìß Email: {order_data['email']}")
	print(f"üí≥ –ö–∞—Ä—Ç–∞: {order_data['card_number']}")
	print(f"üë§ –ò–º—è: {order_data['first_name']} {order_data['last_name']}")
	
	try:
		success = attempt_registration(1, 0, order_data)
		return success
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_single_registration: {e}")
		return False


def run_registration_with_card_retry(order_data_list):
	"""–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–º–µ–Ω—ã –∫–∞—Ä—Ç –Ω–∞ –º–µ—Å—Ç–µ"""
	print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å {len(order_data_list)} –∫–∞—Ä—Ç–∞–º–∏")
	
	# –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ–π - –ø–æ–ª–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
	first_order = order_data_list[0]
	print(f"üìß Email: {first_order['email']}")
	print(f"üë§ –ò–º—è: {first_order['first_name']} {first_order['last_name']}")
	
	try:
		# –ü–æ–ª–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º driver/wait
		success, driver, wait = attempt_registration(1, 0, first_order, return_driver=True)
		if success:
			return True
		
		print("‚ùå –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞ –º–µ—Å—Ç–µ...")
		
		# –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
		for i, order_data in enumerate(order_data_list[1:], 1):
			print(f"\nüîÑ –ü—Ä–æ–±—É–µ–º –∫–∞—Ä—Ç—É #{i+1}: {order_data['card_number']}")
			
			# –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ
			card_changed = change_card_data_only(driver, wait, order_data)
			if card_changed:
				# –ù–∞–∂–∏–º–∞–µ–º Place Order —Å –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π
				try:
					place_order_locators = [
						(By.XPATH, "//button[@data-testid='complete-purchase']")
					]
					
					if click_safely(driver, wait, place_order_locators, name="place-order-button"):
						print("‚úÖ Place Order –Ω–∞–∂–∞—Ç —Å –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π")
						time.sleep(25)  # –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
						
						# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö
						try:
							order_status_link = wait.until(
								EC.presence_of_element_located(
									(By.XPATH, "//a[contains(@href, 'orderstatus.whoop.com')]"))).get_attribute(
								"href")
							print("üéâ –ö–∞—Ä—Ç–∞ –ø—Ä–æ—à–ª–∞!")
							return True
						except:
							print("‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é")
							continue
					else:
						print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å Place Order")
						continue
				except Exception as e:
					print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç—ã: {e}")
					continue
			else:
				print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã")
				continue
		
		# –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
		try:
			driver.quit()
		except:
			pass
		return False
		
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_registration_with_card_retry: {e}")
		return False

def run_flow(card_index: int | None = None) -> None:
	try:
		# –î–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∏–∑–≤–Ω–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞

		if card_index is not None:
			print("üöÄ –†–ï–ñ–ò–ú –û–î–ù–û–ô –ö–ê–†–¢–´ - 3 –ø–æ–ø—ã—Ç–∫–∏")
			print("=" * 50)
			total_registrations = 0
			successful_registrations = 0

			print(f"\nüîÑ –ö–ê–†–¢–ê #{card_index + 1}")
			print("-" * 40)
			card_success = False
			for attempt in range(3):
				print(f"-------–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –¥–ª—è –∫–∞—Ä—Ç—ã #{card_index + 1}-------")
				# set_user_index –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
				success = attempt_registration(total_registrations, attempt)
				total_registrations += 1
				if success:
					print(f"‚úÖ –£–°–ü–ï–•! –ö–∞—Ä—Ç–∞ #{card_index + 1}, –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
					successful_registrations += 1
					card_success = True
					break
				else:
					print(f"‚ùå –ù–ï–£–î–ê–ß–ê! –ö–∞—Ä—Ç–∞ #{card_index + 1}, –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
					if attempt < 2:
						print("‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
						time.sleep(10)

			if not card_success:
				print(f"üí• –ö–ê–†–¢–ê #{card_index + 1} –ò–°–ß–ï–†–ü–ê–ù–ê - –≤—Å–µ 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã")

			print("\n" + "=" * 50)
			print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
			print(f"–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_registrations}")
			print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {successful_registrations}")
			print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_registrations/total_registrations)*100:.1f}%")
			print("=" * 50)
			log_message(
				f"–°–ï–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: {successful_registrations}/{total_registrations} —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π (single card)"
			)
			return

		print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –õ–û–ì–ò–ö–ò - 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—É!")
		print("=" * 50)

		total_registrations = 0
		successful_registrations = 0

		# –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–∞—Ä—Ç–∞–º
		for idx in range(3):  # 3 –∫–∞—Ä—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
			print(f"\nüîÑ –ö–ê–†–¢–ê #{idx + 1}")
			print("-" * 40)

			card_success = False

			# 3 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
			for attempt in range(3):
				print(f"-------–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –¥–ª—è –∫–∞—Ä—Ç—ã #{idx + 1}-------")

				# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã
				# set_user_index –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

				# –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
				success = attempt_registration(total_registrations, attempt)
				total_registrations += 1

				if success:
					print(f"‚úÖ –£–°–ü–ï–•! –ö–∞—Ä—Ç–∞ #{idx + 1}, –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
					successful_registrations += 1
					card_success = True
					break  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–µ
				else:
					print(f"‚ùå –ù–ï–£–î–ê–ß–ê! –ö–∞—Ä—Ç–∞ #{idx + 1}, –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
					if attempt < 2:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
						print("‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
						time.sleep(5)

			if not card_success:
				print(f"üí• –ö–ê–†–¢–ê #{idx + 1} –ò–°–ß–ï–†–ü–ê–ù–ê - –≤—Å–µ 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã")

			# –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
			if idx < 2:  # 3 –∫–∞—Ä—Ç—ã, –ø–æ—Å–ª–µ–¥–Ω—è—è —Å –∏–Ω–¥–µ–∫—Å–æ–º 2
				print("‚è≥ –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ–π...")
				time.sleep(10)

		# –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		print("\n" + "=" * 50)
		print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
		print(f"–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_registrations}")
		print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {successful_registrations}")
		print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_registrations/total_registrations)*100:.1f}%")
		print("=" * 50)

		log_message(f"–°–ï–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: {successful_registrations}/{total_registrations} —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π")

	except Exception as e:
		print(f"-------–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}-------")
		log_message(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
	parser = _argparse.ArgumentParser(description="Whoop bot runner")
	parser.add_argument("--card-index", type=int, default=None, help="Run only this card index (0-based) with 3 attempts")
	cli_args = parser.parse_args()
	run_flow(cli_args.card_index)
