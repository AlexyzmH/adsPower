import time
import os
import random
import string
import requests
import json
from selenium import webdriver
from selenium.common import TimeoutException
from selenium.common.exceptions import ElementClickInterceptedException, StaleElementReferenceException
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import argparse
from selenium.webdriver.common.action_chains import ActionChains
from datetime import datetime
import tempfile
import shutil
import sys
import argparse as _argparse
from selenium.webdriver.common.keys import Keys


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è debug port –æ—Ç AdsPower
def get_adspower_debug_port():
	"""–ü–æ–ª—É—á–∞–µ—Ç debug port –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ AdsPower"""
	import os
	
	# –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
	debug_port = os.environ.get('ADSPOWER_DEBUG_PORT')
	if debug_port:
		print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é debug port –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: {debug_port}")
		return debug_port
	
	api_url = "http://127.0.0.1:50325"
	
	# –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
	endpoints = [
		"/api/v1/browser/active",
		"/api/v2/browser-profile/active", 
		"/api/v1/user/list",
		"/api/v2/browser-profile/list"
	]
	
	for endpoint in endpoints:
		try:
			print(f"üîç –ü—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã: {endpoint}")
			response = requests.get(f"{api_url}{endpoint}")
			
			if response.status_code == 200:
				result = response.json()
				print(f"   üìÑ –û—Ç–≤–µ—Ç: {result}")
				
				if result.get("code") == 0:
					# –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
					data = result.get("data", {})
					active_browsers = data.get("list", []) or data.get("browsers", []) or data.get("data", [])
					
					if active_browsers:
						# –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
						browser = active_browsers[0]
						debug_port = browser.get("debug_port")
						
						if debug_port:
							print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä AdsPower —Å debug port: {debug_port}")
							return debug_port
						else:
							print("‚ùå Debug port –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ")
					else:
						print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ")
				else:
					print(f"‚ùå –û—à–∏–±–∫–∞ API: {result.get('msg')}")
			else:
				print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
				
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {endpoint}: {e}")
	
	print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã")
	return None


# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ –º–∞—Å—Å–∏–≤–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
# –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã 3 –ø–æ–ø—ã—Ç–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏–º–µ–Ω–∏
NAMES = [
	["Ihar", "Ihaar", "Iihar"],  # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è Ihar
	["Ihar", "Ihhar", "Ihaar"],
	["Iihar", "Ihar", "Ihhar"],
	["Ihaar", "Iihar", "Ihar"],
	["Ihhar", "Ihar", "Ihaar"],
	["Ihar", "Iihar", "Ihhar"],
	["Ihaar", "Ihhar", "Ihar"],
	["Iihar", "Ihaar", "Ihar"],
	["Ihhar", "Iihar", "Ihaar"],
	["Ihar", "Ihaar", "Iihar"],
	["Ihaar", "Ihar", "Ihhar"],
	["Iihar", "Ihhar", "Ihaar"],
	["Ihhar", "Ihar", "Iihar"],
	["Ihar", "Ihhar", "Ihaar"],
	["Ihaar", "Iihar", "Ihhar"],
	["Iihar", "Ihar", "Ihaar"],
	["Ihhar", "Ihaar", "Ihar"],
	["Ihar", "Iihar", "Ihhar"],
	["Ihaar", "Ihhar", "Ihar"],
	["Iihar", "Ihaar", "Ihhar"]
]

LAST_NAMES = [
	["Martsinkevich", "Martsinkevitch", "Martsinkevic"],  # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è Martsinkevich
	["Martsinkevich", "Martsinkevic", "Martsinkevitch"],
	["Martsinkevitch", "Martsinkevich", "Martsinkevic"],
	["Martsinkevic", "Martsinkevitch", "Martsinkevich"],
	["Martsinkevich", "Martsinkevic", "Martsinkevitch"],
	["Martsinkevitch", "Martsinkevic", "Martsinkevich"],
	["Martsinkevic", "Martsinkevich", "Martsinkevitch"],
	["Martsinkevich", "Martsinkevitch", "Martsinkevic"],
	["Martsinkevitch", "Martsinkevich", "Martsinkevic"],
	["Martsinkevic", "Martsinkevitch", "Martsinkevich"],
	["Martsinkevich", "Martsinkevic", "Martsinkevitch"],
	["Martsinkevitch", "Martsinkevic", "Martsinkevich"],
	["Martsinkevic", "Martsinkevich", "Martsinkevitch"],
	["Martsinkevich", "Martsinkevitch", "Martsinkevic"],
	["Martsinkevitch", "Martsinkevich", "Martsinkevic"],
	["Martsinkevic", "Martsinkevitch", "Martsinkevich"],
	["Martsinkevich", "Martsinkevic", "Martsinkevitch"],
	["Martsinkevitch", "Martsinkevic", "Martsinkevich"],
	["Martsinkevic", "Martsinkevich", "Martsinkevitch"],
	["Martsinkevic", "Martsinkevich", "Martsinkevitch"]
]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ email
def generate_email(name, last_name):
	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 4 —Å–ª—É—á–∞–π–Ω—ã–µ –±—É–∫–≤—ã
	prefix = ''.join(random.choices(string.ascii_letters, k=4))
	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 99
	number = random.randint(10, 99)
	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 7 —Å–ª—É—á–∞–π–Ω—ã—Ö –±—É–∫–≤
	suffix = ''.join(random.choices(string.ascii_letters, k=7))
	return f"{prefix}{name}{last_name}{number}{suffix}@gmail.com"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
def generate_password():
	return ''.join(random.choices(string.ascii_letters + string.digits, k=14))

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π (–û–ê–≠)
ADDRESS = "Al Mulla Warehouse B2"
ADDRESS_LINE2 = "Al Qusais Industrial Area"

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
CITY = "Dubai"
PROVINCE = "Dubai"
POSTAL_CODE = "00000"  # –í –î—É–±–∞–µ –º–æ–∂–µ—Ç –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è; –∏—Å–ø–æ–ª—å–∑—É–µ–º 00000 –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
PHONE = "+48575081614"

# –ú–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç (–Ω–æ–º–µ—Ä, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è, CVC)
CARDS = [
	#("5573770013072743", "08/30", "165"),
	#("5573770013032259", "08/30", "065"),
	#("5573770013076520", "08/30", "515"),
	#("5573770013146513", "08/30", "865"),
	#("5573770013098995", "08/30", "172"),
	#("5573770013038330", "08/30", "694"),
	#("5573770013125723", "08/30", "530"),
	#("5573770013175074", "08/30", "160"),
	#("5573770014087963", "08/30", "053"),
	#("5573770013132307", "08/30", "903"),
	#("5573770013198662", "08/30", "979"),
	#("5573770013048776", "08/30", "266"),
	#("5573770013018696", "08/30", "864"),
	#("5573770013059013", "08/30", "647"),
	#("5573770013002831", "08/30", "398"),
	#("5573770013013911", "08/30", "511"),
	#("5573770013035419", "08/30", "010"),
	("5573770013046960", "08/30", "395"),
	("5573770013173517", "08/30", "655"),
	("5573770013075043", "08/30", "652")
]

NAMES = NAMES[:len(CARDS)]
LAST_NAMES = LAST_NAMES[:len(CARDS)]

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
password = "TestPassword123!"

# –ò–Ω–¥–µ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π)
current_index = 0

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–∞—Å—Å–∏–≤—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É
def validate_data_arrays():
	arrays = [NAMES, LAST_NAMES, CARDS]
	array_names = ["NAMES", "LAST_NAMES", "CARDS"]
	
	if len(set(len(arr) for arr in arrays)) > 1:
		print("–û–®–ò–ë–ö–ê: –í—Å–µ –º–∞—Å—Å–∏–≤—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É!")
		for i, arr in enumerate(arrays):
			print(f"{array_names[i]}: {len(arr)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
		return False
	else:
		print(f"–í—Å–µ –º–∞—Å—Å–∏–≤—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É: {len(CARDS)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
		return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_current_user_data(attempt=0):
	card_number, exp_date, cvc = CARDS[current_index]
	first_name = NAMES[current_index][attempt]
	last_name = LAST_NAMES[current_index][attempt]
	
	return {
		"email": generate_email(first_name, last_name),
		"password": generate_password(),
		"first_name": first_name,
		"last_name": last_name,
		"address": ADDRESS,
		"address_line2": ADDRESS_LINE2,
		"city": CITY,
		"province": PROVINCE,
		"postal_code": POSTAL_CODE,
		"phone": PHONE,
		"card_number": card_number,
		"exp_date": exp_date,
		"cvc": cvc
	}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–∞–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö
def next_user_data():
	global current_index
	current_index = (current_index + 1) % len(CARDS)
	return get_current_user_data()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
def set_user_index(index):
	global current_index
	if 0 <= index < len(CARDS):
		current_index = index
	else:
		print(f"–ò–Ω–¥–µ–∫—Å {index} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å 0.")
		current_index = 0

# –§–∞–π–ª—ã –ª–æ–≥–æ–≤
LOG_FILE = "reports.log"
SUCCESS_FILE = "successful_registrations.txt"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
def log_message(message):
	timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
	with open(LOG_FILE, "a", encoding="utf-8") as log:
		log.write(f"\n[{timestamp}] {message}\n")
	print(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def save_successful_registration(user_data, order_status_link, order_number=None):
	timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
	success_data = {
		"timestamp": timestamp,
		"email": user_data["email"],
		"password": user_data["password"],
		"first_name": user_data["first_name"],
		"last_name": user_data["last_name"],
		"card_number": user_data["card_number"],
		"order_status_link": order_status_link,
		"order_number": order_number
	}
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
	with open(SUCCESS_FILE, "a", encoding="utf-8") as f:
		f.write(f"\n{'='*50}\n")
		f.write(f"–£–°–ü–ï–®–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø - {timestamp}\n")
		f.write(f"{'='*50}\n")
		f.write(f"Email: {success_data['email']}\n")
		f.write(f"Password: {success_data['password']}\n")
		f.write(f"Name: {success_data['first_name']} {success_data['last_name']}\n")
		f.write(f"Card: {success_data['card_number']}\n")
		f.write(f"Order Link: {success_data['order_status_link']}\n")
		if order_number:
			f.write(f"Order Number: {order_number}\n")
		f.write(f"{'='*50}\n")
	
	# –¢–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
	log_message(f"[SUCCESS] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data['email']}")


def save_artifacts(driver, prefix: str) -> None:
	ts = datetime.now().strftime("%Y%m%d_%H%M%S")
	html_name = f"{prefix}_{ts}.html"
	png_name = f"{prefix}_{ts}.png"
	try:
		with open(html_name, "w", encoding="utf-8") as f:
			f.write(driver.page_source)
	except Exception:
		pass
	try:
		driver.save_screenshot(png_name)
	except Exception:
		pass
	try:
		log_message(f"[DEBUG] Saved artifacts: {html_name}, {png_name}")
	except Exception:
		pass


def click_safely(driver, wait, locators, name: str = "button"):
	for locator in locators:
		try:
			el = wait.until(EC.presence_of_element_located(locator))
			try:
				driver.execute_script(
					"arguments[0].scrollIntoView({block: 'center', inline: 'center'});",
					el,
				)
			except Exception:
				pass
			time.sleep(0.2)
			el = wait.until(EC.visibility_of_element_located(locator))

			try:
				attrs = []
				for a in ["id", "name", "data-testid", "aria-disabled", "disabled"]:
					try:
						attrs.append(f"{a}={el.get_attribute(a)}")
					except Exception:
						pass
				log_message(
					f"[DEBUG] Try click {name} via {locator}: displayed={el.is_displayed()} enabled={el.is_enabled()} attrs={' '.join(attrs)}"
				)
			except Exception:
				pass

			try:
				el.click()
				return True
			except ElementClickInterceptedException:
				try:
					rect = driver.execute_script(
						"const r = arguments[0].getBoundingClientRect();return {x: r.x + r.width/2, y: r.y + r.height/2};",
						el,
					)
					overlay = driver.execute_script(
						"return document.elementFromPoint(arguments[0].x, arguments[0].y);",
						rect,
					)
					overlay_desc = driver.execute_script(
						"const e=arguments[0]; if(!e) return '<null>'; const cls=(e.className||'').toString().replace(/\\s+/g,'.'); return e.tagName+'#'+(e.id||'')+(cls?'.'+cls:'');",
						overlay,
					)
					log_message(f"[DEBUG] Click intercepted by: {overlay_desc}")
				except Exception:
					pass
				try:
					driver.execute_script("arguments[0].click();", el)
					return True
				except Exception:
					pass
				try:
					ActionChains(driver).move_to_element(el).pause(0.1).click(el).perform()
					return True
				except Exception:
					pass
				save_artifacts(driver, f"whoop_click_intercepted_{name}")
			except StaleElementReferenceException:
				try:
					el = driver.find_element(*locator)
					driver.execute_script("arguments[0].click();", el)
					return True
				except Exception:
					pass
			except Exception as e:
				try:
					driver.execute_script("arguments[0].click();", el)
					return True
				except Exception:
					pass
				try:
					ActionChains(driver).move_to_element(el).pause(0.1).click(el).perform()
					return True
				except Exception:
					pass
				try:
					log_message(f"[DEBUG] Click failed for {name} via {locator}: {e}")
				except Exception:
					pass
				save_artifacts(driver, f"whoop_click_failed_{name}")
		except Exception as e:
			try:
				log_message(f"[DEBUG] Locator not clickable {name} via {locator}: {e}")
			except Exception:
				pass
			save_artifacts(driver, f"whoop_locator_unavailable_{name}")
		finally:
			try:
				driver.switch_to.default_content()
			except Exception:
				pass
	return False


# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def attempt_registration(reg_num, attempt=0):
	user_data = get_current_user_data(attempt)
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É –±—Ä–∞—É–∑–µ—Ä—É AdsPower
	debug_port = get_adspower_debug_port()
	if not debug_port:
		print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å debug port –æ—Ç AdsPower!")
		return False
	
	options = webdriver.ChromeOptions()
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É –±—Ä–∞—É–∑–µ—Ä—É AdsPower
	options.add_experimental_option("debuggerAddress", f"127.0.0.1:{debug_port}")
	
	# –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ChromeDriver
	from selenium.webdriver.chrome.service import Service as ChromeService
	from webdriver_manager.chrome import ChromeDriverManager
	
	service = ChromeService(ChromeDriverManager().install())
	driver = webdriver.Chrome(service=service, options=options)
	wait = WebDriverWait(driver, 10)

	try:
		print(f"-------–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é #{reg_num + 1}-------")
		log_message(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ: {user_data['email']} - {user_data['first_name']} {user_data['last_name']}")

		print("-------–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç Whoop...-------")
		driver.get("https://join.whoop.com/uae/en/")
		time.sleep(1)

		print("-------–ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É 'Start with PEAK'...-------")
		start_peak_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@data-testid='membership-PEAK-card-cta']")))
		start_peak_button.click()
		time.sleep(2)

		print("-------–ù–∞–∂–∏–º–∞–µ–º 'Continue'...-------")
		continue_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Continue')]")))
		continue_button.click()
		time.sleep(2)

		print("-------–í—ã–±–∏—Ä–∞–µ–º Trial-membership...-------")
		trial_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@data-testid='trial-membership']")))
		trial_button.click()
		time.sleep(2)

		print("-------–ù–∞–∂–∏–º–∞–µ–º Check Out...-------")
		checkout_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@data-testid='cart-continueButton']")))
		checkout_button.click()
		time.sleep(2)

		print("-------–ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...-------")
		email_field = wait.until(EC.presence_of_element_located((By.NAME, "email")))
		email_field.send_keys(user_data["email"])
		log_message(f"Email: {user_data['email']}")
		time.sleep(1)

		password_field = driver.find_element(By.NAME, "password")
		password_field.send_keys(user_data["password"])
		time.sleep(1)

		confirm_password = driver.find_element(By.NAME, "confirm")
		confirm_password.send_keys(user_data["password"])
		time.sleep(1)

		print("-------–ù–∞–∂–∏–º–∞–µ–º 'Next' –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...-------")
		next_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@data-testid='next-button-create-account']")))
		next_button.click()
		time.sleep(2)

		print("-------–ó–∞–ø–æ–ª–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏...-------")
		first_name = wait.until(EC.presence_of_element_located((By.ID, "first_name")))
		first_name.send_keys(user_data["first_name"])
		time.sleep(1)

		last_name = driver.find_element(By.ID, "last_name")
		last_name.send_keys(user_data["last_name"])
		time.sleep(1)

		print("-------–í–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å...-------")
		address = wait.until(EC.presence_of_element_located((By.ID, "line1")))
		address.send_keys(user_data["address"])
		time.sleep(1)

		try:
			address2 = driver.find_element(By.ID, "line2")
			address2.send_keys(user_data["address_line2"])
			time.sleep(1)
		except Exception:
			pass

		print("-------–í–≤–æ–¥–∏–º –≥–æ—Ä–æ–¥...-------")
		city_el = WebDriverWait(driver, 10).until(
			EC.presence_of_element_located((By.CSS_SELECTOR, "[data-testid='City'][role='combobox']"))
		)
		city_el.click()
		city_el.send_keys(user_data["city"])
		city_el.send_keys(Keys.ENTER)
		time.sleep(1)

		print("-------–í–≤–æ–¥–∏–º –ø—Ä–æ–≤–∏–Ω—Ü–∏—é...-------")
		try:
			# –ò–Ω–æ–≥–¥–∞ —ç—Ç–æ select
			province = wait.until(EC.presence_of_element_located((By.ID, "province")))
			province.send_keys(user_data["province"])
		except Exception:
			try:
				province_alt = wait.until(EC.presence_of_element_located((By.ID, "Area/District")))
				province_alt.send_keys(user_data["province"])
			except Exception:
				pass
		time.sleep(1)

		print("-------–í–≤–æ–¥–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω...-------")
		phone = wait.until(EC.presence_of_element_located((By.ID, "phone")))
		phone.send_keys(user_data["phone"])
		time.sleep(1)

		print("-------–ù–∞–∂–∏–º–∞–µ–º 'Next' –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞...-------")
		try:
			next_address_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@data-testid='next-button-shipping-address']")))
			next_address_button.click()
			time.sleep(2)
		except Exception:
			pass

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É; –∏–Ω–∞—á–µ ‚Äî —Ä–æ–±–∞—Å—Ç–Ω—ã–π –∫–ª–∏–∫ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
		try:
			WebDriverWait(driver, 5).until(
				EC.element_to_be_clickable((By.XPATH, "//button[@data-testid='next-button-shipping-method']"))
			)
		except Exception:
			print("-------–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –Ω–∞–¥—ë–∂–Ω—ã–π –∫–ª–∏–∫ 'Next' –∞–¥—Ä–µ—Å–∞...-------")
			next_locators = [
				(By.XPATH, "//button[@data-testid='next-button-shipping-address']"),
				(By.XPATH, "//button[@type='submit' and .//span[contains(., 'Next')]]"),
				(By.XPATH, "//button[contains(., 'Next')]")
			]
			if not click_safely(driver, wait, next_locators, name="next-shipping-address"):
				# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã
				for fld in driver.find_elements(By.CSS_SELECTOR, "[aria-invalid='true'], .aria-[invalid=true]"):
					fid = fld.get_attribute("id") or fld.get_attribute("name") or "<no-id>"
					log_message(f"[ADDRESS_INVALID] {fid}")
				raise Exception("Next after address not clickable")
			time.sleep(2)

		print("-------–í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –Ω–∞–∂–∏–º–∞–µ–º 'Weiter'...-------")
		weiter_button_shipping = wait.until(
			EC.element_to_be_clickable((By.XPATH, "//button[@data-testid='next-button-shipping-method']")))
		weiter_button_shipping.click()
		time.sleep(1)

		print("-------–ò—â–µ–º iframe —Å –ø–æ–ª—è–º–∏ –∫–∞—Ä—Ç—ã-------")
		iframe_index = None
		iframes = driver.find_elements(By.TAG_NAME, "iframe")

		for index, iframe in enumerate(iframes):
			try:
				driver.switch_to.frame(iframe)
				inner_html = driver.execute_script("return document.body.innerHTML")

				if "cardnumber" in inner_html and "exp-date" in inner_html and "cvc" in inner_html:
					iframe_index = index
					print(f"–ù–∞–π–¥–µ–Ω –Ω—É–∂–Ω—ã–π iframe: #{iframe_index}")
					driver.switch_to.default_content()
					break

				driver.switch_to.default_content()
			except Exception as e:
				print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ iframe[{index}]: {e}")
				driver.switch_to.default_content()

		if iframe_index is None:
			log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ iframe —Å –ø–æ–ª—è–º–∏ –∫–∞—Ä—Ç—ã")
			return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É

		# –í–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
		try:
			driver.switch_to.frame(iframes[iframe_index])

			wait.until(EC.presence_of_element_located((By.NAME, "cardnumber"))).send_keys(user_data["card_number"])
			print("–í–≤–µ–ª –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã")

			wait.until(EC.presence_of_element_located((By.NAME, "exp-date"))).send_keys(user_data["exp_date"])
			print("–í–≤–µ–ª —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è")

			wait.until(EC.presence_of_element_located((By.NAME, "cvc"))).send_keys(user_data["cvc"])
			print("–í–≤–µ–ª CVC")

			driver.switch_to.default_content()
		except Exception as e:
			log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã: {e}")
			driver.switch_to.default_content()

		print("-------–ù–∞–∂–∏–º–∞–µ–º 'Place Order'...-------")
		try:
			place_order_button = wait.until(
				EC.element_to_be_clickable((By.XPATH, "//button[@data-testid='complete-purchase']")))
			place_order_button.click()
			log_message("–ö–Ω–æ–ø–∫–∞ Place Order –Ω–∞–∂–∞—Ç–∞")
			time.sleep(3)  # –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
		except Exception as e:
			log_message(f"–û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Place Order: {e}")
			# –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
			try:
				place_order_button = wait.until(
					EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Place Order')]")))
				place_order_button.click()
				log_message("Place Order –Ω–∞–∂–∞—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º")
				time.sleep(3)
			except:
				log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å Place Order")
				# –†–æ–±–∞—Å—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
				click_safely(
					driver,
					wait,
					[
						(By.XPATH, "//button[@data-testid='complete-purchase']"),
						(By.XPATH, "//button[contains(text(), 'Place Order')]")
					],
					name="complete-purchase"
				)

		try:
			# –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
			error_message = WebDriverWait(driver, 5).until(
				EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'text-red-a400')]"))
			).text

			# –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
			log_message(f"[UNSUCCESSFUL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ: {error_message}, –ö–∞—Ä—Ç–∞: {user_data['card_number']}")

		except:
			# –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å, –∑–Ω–∞—á–∏—Ç –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ
			log_message("[SUCCESSFUL]–û—à–∏–±–æ–∫ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

		print("-------–ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à—ë–ª –ª–∏ –ø–ª–∞—Ç–µ–∂...-------")
		try:
			order_status_link = wait.until(
				EC.presence_of_element_located(
					(By.XPATH, "//a[contains(@href, 'orderstatus.whoop.com')]"))).get_attribute(
				"href")
			log_message(f"[SUCCESSFUL]–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω!Email: {user_data['email']}, Pass:{user_data['password']}, –ö–∞—Ä—Ç–∞: {user_data['card_number']}, –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: {order_status_link}")
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
			save_successful_registration(user_data, order_status_link)

			print("-------–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞...25 —Å–µ–∫-------")
			driver.get(order_status_link)
			time.sleep(8)

			print("-------–ò—â–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞...-------")
			order_number_element = None

			# –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ –ø–æ –∫–ª–∞—Å—Å—É
			try:
				order_number_element = WebDriverWait(driver, 10).until(
					EC.presence_of_element_located((By.CLASS_NAME, "gpSbjZ"))
				)
			except:
				pass  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–ª–∞—Å—Å—É, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±

			# –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–ª–∞—Å—Å—É, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
			if not order_number_element:
				try:
					order_number_element = WebDriverWait(driver, 10).until(
						EC.presence_of_element_located((By.XPATH, "//div[contains(text(), 'Order number:')]"))
					)
				except:
					pass

			# –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –î–µ—Ç–∞–ª–∏
			if not order_number_element:
				print("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å –î–µ—Ç–∞–ª–∏...")
				try:
					quittung_button = wait.until(
						EC.element_to_be_clickable((By.XPATH, "//a[@data-test-id='view-order-details']"))
					)
					quittung_button.click()
					time.sleep(3)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã

					print("-------–ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ –Ω–æ–≤–æ–º –±–ª–æ–∫–µ...-------")
					order_number_element = wait.until(
						EC.presence_of_element_located((By.CLASS_NAME, "order-details_shipItem__ln8a9"))
					)
				except:
					pass

			# –ï—Å–ª–∏ –Ω–∞—à–ª–∏, –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
			if order_number_element:
				order_number = order_number_element.text.split(":")[-1].strip()
				log_message(f"[SUCCESSFUL]–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}")
				# –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
				save_successful_registration(user_data, order_status_link, order_number)
			else:
				print("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.")
				page_source = driver.page_source
				with open("whoop_order_status.html", "w", encoding="utf-8") as f:
					f.write(page_source)
				log_message(f"[BUT]: –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

		except Exception:
			log_message(f"[UNSUCCESSFUL]–û—à–∏–±–∫–∞: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞. –ö–∞—Ä—Ç–∞: {user_data['card_number']}")
			return False  # –ù–µ—É–¥–∞—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

		log_message(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è #{reg_num + 1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {user_data['email']}")
		return True  # –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

	except Exception as e:
		print(f"-------–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}-------")
		try:
			with open("whoop_error_page.html", "w", encoding="utf-8") as f:
				f.write(driver.page_source)
			log_message("[DEBUG] Saved whoop_error_page.html")
		except Exception:
			pass
		try:
			driver.save_screenshot("whoop_error_page.png")
			log_message("[DEBUG] Saved whoop_error_page.png")
		except Exception:
			pass
		return False  # –ù–µ—É–¥–∞—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

	finally:
		print("-------–ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...-------")
		time.sleep(1)
		try:
			driver.quit()
		finally:
			# –ù–ï —É–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å - –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è AdsPower
			pass


def run_flow(card_index: int | None = None) -> None:
	try:
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
		if not validate_data_arrays():
			raise Exception("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

		if card_index is not None:
			print("üöÄ –†–ï–ñ–ò–ú –û–î–ù–û–ô –ö–ê–†–¢–´ - 3 –ø–æ–ø—ã—Ç–∫–∏")
			print("=" * 50)
			total_registrations = 0
			successful_registrations = 0

			print(f"\nüîÑ –ö–ê–†–¢–ê #{card_index + 1} - {CARDS[card_index][0]}")
			print("-" * 40)
			card_success = False
			for attempt in range(3):
				print(f"-------–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –¥–ª—è –∫–∞—Ä—Ç—ã #{card_index + 1}-------")
				set_user_index(card_index)
				success = attempt_registration(total_registrations, attempt)
				total_registrations += 1
				if success:
					print(f"‚úÖ –£–°–ü–ï–•! –ö–∞—Ä—Ç–∞ #{card_index + 1}, –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
					successful_registrations += 1
					card_success = True
					break
				else:
					print(f"‚ùå –ù–ï–£–î–ê–ß–ê! –ö–∞—Ä—Ç–∞ #{card_index + 1}, –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
					if attempt < 2:
						print("‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
						time.sleep(5)

			if not card_success:
				print(f"üí• –ö–ê–†–¢–ê #{card_index + 1} –ò–°–ß–ï–†–ü–ê–ù–ê - –≤—Å–µ 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã")

			print("\n" + "=" * 50)
			print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
			print(f"–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_registrations}")
			print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {successful_registrations}")
			print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_registrations/total_registrations)*100:.1f}%")
			print("=" * 50)
			log_message(
				f"–°–ï–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: {successful_registrations}/{total_registrations} —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π (single card)"
			)
			return

		print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –õ–û–ì–ò–ö–ò - 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—É!")
		print("=" * 50)

		total_registrations = 0
		successful_registrations = 0

		# –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–∞—Ä—Ç–∞–º
		for idx in range(len(CARDS)):
			print(f"\nüîÑ –ö–ê–†–¢–ê #{idx + 1} - {CARDS[idx][0]}")
			print("-" * 40)

			card_success = False

			# 3 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
			for attempt in range(3):
				print(f"-------–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –¥–ª—è –∫–∞—Ä—Ç—ã #{idx + 1}-------")

				# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã
				set_user_index(idx)

				# –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
				success = attempt_registration(total_registrations, attempt)
				total_registrations += 1

				if success:
					print(f"‚úÖ –£–°–ü–ï–•! –ö–∞—Ä—Ç–∞ #{idx + 1}, –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
					successful_registrations += 1
					card_success = True
					break  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–µ
				else:
					print(f"‚ùå –ù–ï–£–î–ê–ß–ê! –ö–∞—Ä—Ç–∞ #{idx + 1}, –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
					if attempt < 2:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
						print("‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
						time.sleep(5)

			if not card_success:
				print(f"üí• –ö–ê–†–¢–ê #{idx + 1} –ò–°–ß–ï–†–ü–ê–ù–ê - –≤—Å–µ 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã")

			# –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
			if idx < len(CARDS) - 1:
				print("‚è≥ –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ–π...")
				time.sleep(10)

		# –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		print("\n" + "=" * 50)
		print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
		print(f"–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_registrations}")
		print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {successful_registrations}")
		print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_registrations/total_registrations)*100:.1f}%")
		print("=" * 50)

		log_message(f"–°–ï–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: {successful_registrations}/{total_registrations} —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π")

	except Exception as e:
		print(f"-------–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}-------")
		log_message(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
	parser = _argparse.ArgumentParser(description="Whoop bot runner")
	parser.add_argument("--card-index", type=int, default=None, help="Run only this card index (0-based) with 3 attempts")
	cli_args = parser.parse_args()
	run_flow(cli_args.card_index)
