#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ AdsPower
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.json
"""

import requests
import json
import random
import secrets
import os


def get_random_browser():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞"""
    browsers = [
        "chrome",
        "firefox", 
        "edge",
        "safari"
    ]
    return random.choice(browsers)


def get_random_os():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã)"""
    operating_systems = [
        "Windows",    # Windows 10/11
        "macOS",      # macOS Monterey/Ventura/Sonoma
        "Linux"       # Ubuntu/Debian/Fedora
    ]
    return random.choice(operating_systems)


def generate_realistic_mac_address():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é MAC-–∞–¥—Ä–µ—Å –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∂–µ–ª–µ–∑–∞ (–Ω–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω)
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OUI (Organizationally Unique Identifier) –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
    """
    # OUI –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å–µ—Ç–µ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    real_hardware_ouis = [
        # Intel Corporation
        "00:1B:21", "00:1C:42", "00:1D:7E", "00:1E:67", "00:1F:3A",
        "00:21:6A", "00:22:FB", "00:24:81", "00:25:00", "00:26:55",
        "00:27:19", "00:28:45", "00:29:AB", "00:2A:70", "00:2B:0D",
        
        # Realtek Semiconductor
        "00:1F:5B", "00:1F:5C", "00:1F:5D", "00:1F:5E", "00:1F:5F",
        "00:1F:60", "00:1F:61", "00:1F:62", "00:1F:63", "00:1F:64",
        "00:1F:65", "00:1F:66", "00:1F:67", "00:1F:68", "00:1F:69",
        
        # Broadcom Corporation
        "00:10:18", "00:10:1F", "00:10:2F", "00:10:3F", "00:10:4F",
        "00:10:5F", "00:10:6F", "00:10:7F", "00:10:8F", "00:10:9F",
        "00:10:AF", "00:10:BF", "00:10:CF", "00:10:DF", "00:10:EF",
        
        # Qualcomm Atheros
        "00:13:10", "00:13:46", "00:13:74", "00:13:CE", "00:13:E8",
        "00:15:00", "00:15:6D", "00:15:AF", "00:15:B7", "00:15:C7",
        "00:15:E9", "00:15:F2", "00:16:01", "00:16:3E", "00:16:44",
        
        # Marvell Technology Group
        "00:50:43", "00:50:DA", "00:50:E2", "00:50:F2", "00:50:F5",
        "00:50:F6", "00:50:F7", "00:50:F8", "00:50:F9", "00:50:FA",
        "00:50:FB", "00:50:FC", "00:50:FD", "00:50:FE", "00:50:FF",
        
        # ASUS
        "00:1F:C6", "00:22:15", "00:24:8C", "00:26:18", "00:26:4A",
        "00:26:5B", "00:26:82", "00:26:AB", "00:26:CE", "00:26:F2",
        "00:27:19", "00:27:22", "00:27:8E", "00:27:EB", "00:28:45",
        
        # Dell
        "00:14:22", "00:15:C5", "00:16:35", "00:18:8B", "00:1A:A0",
        "00:1B:78", "00:1C:23", "00:1D:09", "00:1E:4C", "00:1F:29",
        "00:21:70", "00:22:19", "00:23:7D", "00:24:B8", "00:25:64",
        
        # HP
        "00:1F:29", "00:21:5A", "00:22:64", "00:23:7D", "00:24:81",
        "00:25:B3", "00:26:55", "00:27:19", "00:28:45", "00:29:AB",
        "00:2A:70", "00:2B:0D", "00:2C:44", "00:2D:76", "00:2E:3C",
        
        # Lenovo
        "00:21:86", "00:22:68", "00:23:24", "00:24:81", "00:25:64",
        "00:26:55", "00:27:19", "00:28:45", "00:29:AB", "00:2A:70",
        "00:2B:0D", "00:2C:44", "00:2D:76", "00:2E:3C", "00:2F:9A",
        
        # Apple (–¥–ª—è macOS)
        "00:1B:63", "00:1C:42", "00:1D:4F", "00:1E:52", "00:1F:5B",
        "00:21:E9", "00:22:41", "00:23:12", "00:23:DF", "00:24:36",
        "00:25:00", "00:25:4B", "00:25:BC", "00:26:08", "00:26:4A",
        "00:26:B0", "00:26:BB", "00:27:10", "00:27:3E", "00:27:8E"
    ]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π OUI
    oui = random.choice(real_hardware_ouis)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –±–∞–π—Ç–∞ (6 hex —Å–∏–º–≤–æ–ª–æ–≤)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º secrets –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    last_three_bytes = secrets.token_hex(3)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ MAC-–∞–¥—Ä–µ—Å
    mac_address = f"{oui}:{last_three_bytes[0:2]}:{last_three_bytes[2:4]}:{last_three_bytes[4:6]}"
    
    return mac_address


def get_adspower_api_url():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç URL API AdsPower"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –ø–æ—Ä—Ç–∞
    manual_port = os.environ.get('ADSPOWER_PORT')
    if manual_port:
        try:
            port = int(manual_port)
            api_url = f"http://127.0.0.1:{port}"
            response = requests.get(f"{api_url}/api/v1/user/list", timeout=2)
            if response.status_code == 200:
                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: {port}")
                return api_url
            else:
                print(f"‚ö†Ô∏è –ü–æ—Ä—Ç {port} –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except:
            print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: {manual_port}")
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ AdsPower
    possible_ports = [
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã
        50325, 50326, 50327, 50328, 50329,
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã
        50330, 50331, 50332, 50333, 50334, 50335,
        # –î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Ä—Ç—ã
        50320, 50321, 50322, 50323, 50324,
        50336, 50337, 50338, 50339, 50340,
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ—Ä—Ç—ã (–µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª)
        50300, 50301, 50302, 50303, 50304, 50305,
        50310, 50311, 50312, 50313, 50314, 50315
    ]
    
    print("üîç –ò—â—É AdsPower API...")
    
    for port in possible_ports:
        api_url = f"http://127.0.0.1:{port}"
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            response = requests.get(f"{api_url}/api/v1/user/list", timeout=1)
            if response.status_code == 200:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω AdsPower API –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                return api_url
        except:
            continue
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤
    print("üîç –°–∫–∞–Ω–∏—Ä—É—é –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤ 50300-50400...")
    for port in range(50300, 50401):
        api_url = f"http://127.0.0.1:{port}"
        try:
            response = requests.get(f"{api_url}/api/v1/user/list", timeout=0.5)
            if response.status_code == 200:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω AdsPower API –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                return api_url
        except:
            continue
    
    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç
    print("‚ùå AdsPower API –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
    print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
    print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ AdsPower –∑–∞–ø—É—â–µ–Ω")
    print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ API –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
    print("   3. –£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –≤—Ä—É—á–Ω—É—é –≤ –∫–æ–¥–µ")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç –∫–∞–∫ fallback
    return "http://127.0.0.1:50325"


def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.json"""
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json: {e}")
        return None


def list_proxies():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏ –∏–∑ AdsPower"""
    api_url = get_adspower_api_url()
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–ø—É—Å—Ç–æ–π body –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏)
    request_data = {}
    
    try:
        response = requests.post(f"{api_url}/api/v2/proxy-list/list", json=request_data)
        
        if response.status_code == 200:
            result = response.json()
            
            if result.get("code") == 0:
                proxies = result.get("data", {}).get("list", [])
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {len(proxies)}")
                
                for i, proxy in enumerate(proxies):
                    proxy_id = proxy.get('proxy_id')
                    proxy_type = proxy.get('type')
                    proxy_host = proxy.get('host')
                    proxy_port = proxy.get('port')
                    print(f"   {i+1}. ID: {proxy_id} | {proxy_type}://{proxy_host}:{proxy_port}")
                
                return proxies
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {result.get('msg')}")
                return []
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []


def create_profile(proxy_index=None):
    """–°–æ–∑–¥–∞–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å –≤ AdsPower –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    config = load_config()
    if not config:
        return None
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    profile_config = config["profiles"][0]
    
    # URL API AdsPower (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞)
    api_url = get_adspower_api_url()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏
    print("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –∏–∑ AdsPower...")
    proxies = list_proxies()
    
    if not proxies:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ AdsPower –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!")
        return None
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π
    if proxy_index is not None and 0 <= proxy_index < len(proxies):
        proxy = proxies[proxy_index]
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–∫—Å–∏ #{proxy_index + 1}: {proxy.get('type')}://{proxy.get('host')}:{proxy.get('port')}")
    else:
        proxy = random.choice(proxies)
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏: {proxy.get('type')}://{proxy.get('host')}:{proxy.get('port')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–∫—Å–∏ (–º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
    proxy_type = proxy.get('type', '').lower()
    proxy_host = proxy.get('host', '')
    
    print(f"üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ö–°–ò:")
    print(f"   –¢–∏–ø: {proxy_type}")
    print(f"   –•–æ—Å—Ç: {proxy_host}")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
    if 'mobile' in proxy_host.lower() or '4g' in proxy_host.lower() or '5g' in proxy_host.lower():
        print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–∫—Å–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–æ–±–∏–ª—å–Ω—ã–º - —ç—Ç–æ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!")
    
    proxy_id = proxy.get('proxy_id')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –û–° –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–µ
    browser_setting = profile_config.get("browser", "random")
    os_setting = profile_config.get("os", "random")
    
    if browser_setting == "random":
        browser = get_random_browser()
    else:
        browser = browser_setting
    
    if os_setting == "random":
        os = get_random_os()
    else:
        os = os_setting
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –û–°
    if browser == "safari" and os != "macOS":
        print(f"‚ö†Ô∏è Safari –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å {os}, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è—é –Ω–∞ macOS")
        os = "macOS"
    elif browser == "edge" and os == "Linux":
        print(f"‚ö†Ô∏è Edge –Ω–∞ Linux –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º, –º–µ–Ω—è—é –Ω–∞ Chrome")
        browser = "chrome"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é MAC-–∞–¥—Ä–µ—Å
    mac_address = generate_realistic_mac_address()
    
    print(f"üåê –ë—Ä–∞—É–∑–µ—Ä: {browser}")
    print(f"üíª –û–°: {os}")
    print(f"üîß MAC-–∞–¥—Ä–µ—Å: {mac_address}")
    print(f"üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: mobile=0, touch=0, device_type=desktop")
    print(f"üîß AdsPower –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç —Ñ–∏–Ω–≥–µ—Ä–ø—Ä–∏–Ω—Ç –¥–ª—è {browser} –Ω–∞ {os}")
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    profile_data = {
        "name": profile_config["name"],
        "group_id": "0",
        "remark": "–°–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç (–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –î–ï–°–ö–¢–û–ü)",
        "proxyid": proxy_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏
        
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
        "device_type": "desktop",  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: –¥–µ—Å–∫—Ç–æ–ø
        "is_mobile": False,  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: –ù–ï –º–æ–±–∏–ª—å–Ω–æ–µ
        
        # –ö—É–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        "cookies": profile_config.get("cookies", []),
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–Ω–≥–µ—Ä–ø—Ä–∏–Ω—Ç–∞
        "fingerprint_config": {
            "automatic_timezone": "1",  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ IP
            "webrtc": "proxy",  # –ü–æ–¥–º–µ–Ω–∞ IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ 
            "language": ["ar-AE", "ar"],  # –Ø–∑—ã–∫ –∞—Ä–∞–±—Å–∫–∏–π (–û–ê–≠)
            "page_language_switch": "0",  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —è–∑—ã–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            "page_language": "ar-AE",  # –ê—Ä–∞–±—Å–∫–∏–π —è–∑—ã–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–û–ê–≠)
            "timezone": "Asia/Dubai",  # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –û–ê–≠
            "webgl_image": "1",  # –í–∫–ª—é—á–∏—Ç—å WebGL image fingerprint
            "webgl": "3",  # –°–ª—É—á–∞–π–Ω—ã–π WebGL metadata
            "audio": "1",
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –û–° (–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –¢–û–õ–¨–ö–û –î–ï–°–ö–¢–û–ü–ù–´–ï)
            "browser": browser,  # –°–ª—É—á–∞–π–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä (chrome, firefox, edge, safari)
            "os": os,  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: Windows, macOS, Linux (–ù–ï Android!)
            "platform": os,  # –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (–æ–±—ã—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –û–°)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
            "mobile": "0",  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: –ù–ï –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            "touch": "0",  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: –ù–ï —Å–µ–Ω—Å–æ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω
            "device_type": "desktop",  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            
            # MAC-–∞–¥—Ä–µ—Å –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            "mac_address": mac_address,  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è MAC-–∞–¥—Ä–µ—Å –æ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∂–µ–ª–µ–∑–∞
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            "hardware_concurrency": random.choice(["2", "3", "4", "6", "8", "10", "12", "16", "20", "24", "32", "64"]),  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä CPU
            "device_memory": str(random.choice([4, 8, 16, 32])),  # –û–±—ä–µ–º RAM –≤ GB
            "screen_resolution": random.choice(["1920_1080", "2560_1440", "3840_2160", "3440_1440"]),  # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
            "color_depth": str(random.choice([24, 32])),  # –ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞
            "canvas": "1",  # –í–∫–ª—é—á–∏—Ç—å canvas fingerprint
            "fonts": ["Arial", "Calibri", "Cambria", "Times New Roman"],  # –°–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            "device_scale_factor": "1",  # –ú–∞—Å—à—Ç–∞–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (1 = 100%)
            "pixel_ratio": "1",  # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª–µ–π
            "zoom_level": "0",  # –£—Ä–æ–≤–µ–Ω—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (0 = 100%)
            
            # WebGL Vendor –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            "webgl_vendor": random.choice([
                "Google Inc. (Intel)",
                "Google Inc. (NVIDIA Corporation)",
                "Google Inc. (AMD)",
                "Google Inc. (Intel Inc.)"
            ]),
            
            # WebGL Renderer –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            "webgl_renderer": random.choice([
                "ANGLE (Intel, Intel(R) UHD Graphics 620 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.8336)",
                "ANGLE (NVIDIA, NVIDIA GeForce GTX 1060 Direct3D11 vs_5_0 ps_5_0, D3D11-30.0.14.7111)",
                "ANGLE (AMD, AMD Radeon RX 580 Direct3D11 vs_5_0 ps_5_0, D3D11-30.0.14.7111)",
                "ANGLE (Intel, Intel(R) Iris Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11-30.0.14.7111)"
            ])
        }
    }
    
    print(f"–°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–∏–ª—å: {profile_config['name']}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∫—É–∫–∏
    cookies_count = len(profile_config.get("cookies", []))
    print(f"üç™ –î–æ–±–∞–≤–ª—è—é {cookies_count} –∫—É–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–Ω–≥–µ—Ä–ø—Ä–∏–Ω—Ç–∞
    fingerprint = profile_data["fingerprint_config"]
    print(f"üîç –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í ADSPOWER:")
    print(f"   OS: {fingerprint['os']}")
    print(f"   Platform: {fingerprint['platform']}")
    print(f"   Mobile: {fingerprint['mobile']}")
    print(f"   Touch: {fingerprint['touch']}")
    print(f"   Device Type: {fingerprint['device_type']}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        response = requests.post(f"{api_url}/api/v1/user/create", json=profile_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if response.status_code == 200:
            result = response.json()
            
            if result.get("code") == 0:
                user_id = result.get("data", {}).get("id")
                print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                print(f"   –ò–º—è: {profile_config['name']}")
                print(f"   ID: {user_id}")
                print(f"   –ü—Ä–æ–∫—Å–∏ ID: {proxy_id}")
                print(f"   MAC-–∞–¥—Ä–µ—Å: {mac_address}")
                return user_id
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {result.get('msg')}")
                return None
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


def start_browser(user_id):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç WebDriver –¥–∞–Ω–Ω—ã–µ"""
    api_url = get_adspower_api_url()
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ (API v2)
    browser_data = {
        "profile_id": user_id,
        "headless": "0",  # 0 = –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º, 1 = headless
        "last_opened_tabs": "1",  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∫–ª–∞–¥–æ–∫
        "proxy_detection": "1",  # –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏
        "password_filling": "0",  # –ù–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø–∞—Ä–æ–ª–∏
        "password_saving": "0",  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–∞—Ä–æ–ª–∏
        "cdp_mask": "1",  # –ú–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å CDP –¥–µ—Ç–µ–∫—Ü–∏—é
        "delete_cache": "0"  # –ù–µ —É–¥–∞–ª—è—Ç—å –∫—ç—à
    }
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {user_id}...")
    
    try:
        response = requests.post(f"{api_url}/api/v2/browser-profile/start", json=browser_data)
        
        if response.status_code == 200:
            result = response.json()
            
            if result.get("code") == 0:
                data = result.get("data", {})
                ws_selenium = data.get("ws", {}).get("selenium")
                ws_puppeteer = data.get("ws", {}).get("puppeteer")
                debug_port = data.get("debug_port")
                webdriver_path = data.get("webdriver")
                
                print(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
                print(f"   Selenium URL: {ws_selenium}")
                print(f"   Puppeteer URL: {ws_puppeteer}")
                print(f"   Debug Port: {debug_port}")
                print(f"   WebDriver Path: {webdriver_path}")
                
                return {
                    "success": True,
                    "ws_selenium": ws_selenium,
                    "ws_puppeteer": ws_puppeteer,
                    "debug_port": debug_port,
                    "webdriver_path": webdriver_path,
                    "user_id": user_id
                }
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {result.get('msg')}")
                return {"success": False, "error": result.get('msg')}
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return {"success": False, "error": f"HTTP {response.status_code}"}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {"success": False, "error": str(e)}


def stop_browser(user_id):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è"""
    api_url = get_adspower_api_url()
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (API v2)
    browser_data = {
        "profile_id": user_id
    }
    
    print(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {user_id}...")
    
    try:
        response = requests.post(f"{api_url}/api/v2/browser-profile/stop", json=browser_data)
        
        if response.status_code == 200:
            result = response.json()
            
            if result.get("code") == 0:
                print(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {result.get('msg')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è AdsPower ===\n")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    user_id = create_profile()
    
    if user_id:
        print(f"\nüéâ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: {user_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        browser_info = start_browser(user_id)
        
        if browser_info["success"]:
            print(f"\nüåê –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!")
            print(f"   WebDriver URL: {browser_info['ws_url']}")
            print(f"\nüí° –¢–µ–ø–µ—Ä—å –≤–∞—à –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±—Ä–∞—É–∑–µ—Ä—É!")
            print(f"   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ WebDriver URL –¥–ª—è Selenium/Playwright")
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            stop_browser(user_id)
        else:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä: {browser_info['error']}")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
    
    print("\n=== –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ===")


if __name__ == "__main__":
    main()
